//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FleetIOVehicleDLL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FleetIOVehiclesDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FleetIOVehiclesDataSet : global::System.Data.DataSet {
        
        private fleetiovehiclesDataTable tablefleetiovehicles;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public FleetIOVehiclesDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected FleetIOVehiclesDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["fleetiovehicles"] != null)) {
                    base.Tables.Add(new fleetiovehiclesDataTable(ds.Tables["fleetiovehicles"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fleetiovehiclesDataTable fleetiovehicles {
            get {
                return this.tablefleetiovehicles;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            FleetIOVehiclesDataSet cln = ((FleetIOVehiclesDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["fleetiovehicles"] != null)) {
                    base.Tables.Add(new fleetiovehiclesDataTable(ds.Tables["fleetiovehicles"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablefleetiovehicles = ((fleetiovehiclesDataTable)(base.Tables["fleetiovehicles"]));
            if ((initTable == true)) {
                if ((this.tablefleetiovehicles != null)) {
                    this.tablefleetiovehicles.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "FleetIOVehiclesDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FleetIOVehiclesDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablefleetiovehicles = new fleetiovehiclesDataTable();
            base.Tables.Add(this.tablefleetiovehicles);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializefleetiovehicles() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FleetIOVehiclesDataSet ds = new FleetIOVehiclesDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void fleetiovehiclesRowChangeEventHandler(object sender, fleetiovehiclesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class fleetiovehiclesDataTable : global::System.Data.TypedTableBase<fleetiovehiclesRow> {
            
            private global::System.Data.DataColumn columnFleetIOVehiclesTransactionID;
            
            private global::System.Data.DataColumn columnFleetIOVehicleID;
            
            private global::System.Data.DataColumn columnFleetIOVehicleYear;
            
            private global::System.Data.DataColumn columnFleetIOVehicleNumber;
            
            private global::System.Data.DataColumn columnFleetIOVehicleMake;
            
            private global::System.Data.DataColumn columnFleetIOVehicleVIN;
            
            private global::System.Data.DataColumn columnFleetIOVehicleType;
            
            private global::System.Data.DataColumn columnFleetIOVehicleGroup;
            
            private global::System.Data.DataColumn columnFleetIOVehicleLicensePlate;
            
            private global::System.Data.DataColumn columnFleetIOVehicleModel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesDataTable() {
                this.TableName = "fleetiovehicles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal fleetiovehiclesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected fleetiovehiclesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehiclesTransactionIDColumn {
                get {
                    return this.columnFleetIOVehiclesTransactionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleIDColumn {
                get {
                    return this.columnFleetIOVehicleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleYearColumn {
                get {
                    return this.columnFleetIOVehicleYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleNumberColumn {
                get {
                    return this.columnFleetIOVehicleNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleMakeColumn {
                get {
                    return this.columnFleetIOVehicleMake;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleVINColumn {
                get {
                    return this.columnFleetIOVehicleVIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleTypeColumn {
                get {
                    return this.columnFleetIOVehicleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleGroupColumn {
                get {
                    return this.columnFleetIOVehicleGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleLicensePlateColumn {
                get {
                    return this.columnFleetIOVehicleLicensePlate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn FleetIOVehicleModelColumn {
                get {
                    return this.columnFleetIOVehicleModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesRow this[int index] {
                get {
                    return ((fleetiovehiclesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event fleetiovehiclesRowChangeEventHandler fleetiovehiclesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event fleetiovehiclesRowChangeEventHandler fleetiovehiclesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event fleetiovehiclesRowChangeEventHandler fleetiovehiclesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event fleetiovehiclesRowChangeEventHandler fleetiovehiclesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddfleetiovehiclesRow(fleetiovehiclesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesRow AddfleetiovehiclesRow(int FleetIOVehicleID, int FleetIOVehicleYear, string FleetIOVehicleNumber, string FleetIOVehicleMake, string FleetIOVehicleVIN, string FleetIOVehicleType, string FleetIOVehicleGroup, string FleetIOVehicleLicensePlate, string FleetIOVehicleModel) {
                fleetiovehiclesRow rowfleetiovehiclesRow = ((fleetiovehiclesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FleetIOVehicleID,
                        FleetIOVehicleYear,
                        FleetIOVehicleNumber,
                        FleetIOVehicleMake,
                        FleetIOVehicleVIN,
                        FleetIOVehicleType,
                        FleetIOVehicleGroup,
                        FleetIOVehicleLicensePlate,
                        FleetIOVehicleModel};
                rowfleetiovehiclesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfleetiovehiclesRow);
                return rowfleetiovehiclesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesRow FindByFleetIOVehiclesTransactionID(int FleetIOVehiclesTransactionID) {
                return ((fleetiovehiclesRow)(this.Rows.Find(new object[] {
                            FleetIOVehiclesTransactionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                fleetiovehiclesDataTable cln = ((fleetiovehiclesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new fleetiovehiclesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnFleetIOVehiclesTransactionID = base.Columns["FleetIOVehiclesTransactionID"];
                this.columnFleetIOVehicleID = base.Columns["FleetIOVehicleID"];
                this.columnFleetIOVehicleYear = base.Columns["FleetIOVehicleYear"];
                this.columnFleetIOVehicleNumber = base.Columns["FleetIOVehicleNumber"];
                this.columnFleetIOVehicleMake = base.Columns["FleetIOVehicleMake"];
                this.columnFleetIOVehicleVIN = base.Columns["FleetIOVehicleVIN"];
                this.columnFleetIOVehicleType = base.Columns["FleetIOVehicleType"];
                this.columnFleetIOVehicleGroup = base.Columns["FleetIOVehicleGroup"];
                this.columnFleetIOVehicleLicensePlate = base.Columns["FleetIOVehicleLicensePlate"];
                this.columnFleetIOVehicleModel = base.Columns["FleetIOVehicleModel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnFleetIOVehiclesTransactionID = new global::System.Data.DataColumn("FleetIOVehiclesTransactionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehiclesTransactionID);
                this.columnFleetIOVehicleID = new global::System.Data.DataColumn("FleetIOVehicleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleID);
                this.columnFleetIOVehicleYear = new global::System.Data.DataColumn("FleetIOVehicleYear", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleYear);
                this.columnFleetIOVehicleNumber = new global::System.Data.DataColumn("FleetIOVehicleNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleNumber);
                this.columnFleetIOVehicleMake = new global::System.Data.DataColumn("FleetIOVehicleMake", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleMake);
                this.columnFleetIOVehicleVIN = new global::System.Data.DataColumn("FleetIOVehicleVIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleVIN);
                this.columnFleetIOVehicleType = new global::System.Data.DataColumn("FleetIOVehicleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleType);
                this.columnFleetIOVehicleGroup = new global::System.Data.DataColumn("FleetIOVehicleGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleGroup);
                this.columnFleetIOVehicleLicensePlate = new global::System.Data.DataColumn("FleetIOVehicleLicensePlate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleLicensePlate);
                this.columnFleetIOVehicleModel = new global::System.Data.DataColumn("FleetIOVehicleModel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFleetIOVehicleModel);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFleetIOVehiclesTransactionID}, true));
                this.columnFleetIOVehiclesTransactionID.AutoIncrement = true;
                this.columnFleetIOVehiclesTransactionID.AutoIncrementSeed = -1;
                this.columnFleetIOVehiclesTransactionID.AutoIncrementStep = -1;
                this.columnFleetIOVehiclesTransactionID.AllowDBNull = false;
                this.columnFleetIOVehiclesTransactionID.ReadOnly = true;
                this.columnFleetIOVehiclesTransactionID.Unique = true;
                this.columnFleetIOVehicleID.AllowDBNull = false;
                this.columnFleetIOVehicleYear.AllowDBNull = false;
                this.columnFleetIOVehicleNumber.AllowDBNull = false;
                this.columnFleetIOVehicleNumber.MaxLength = 100;
                this.columnFleetIOVehicleMake.AllowDBNull = false;
                this.columnFleetIOVehicleMake.MaxLength = 100;
                this.columnFleetIOVehicleVIN.AllowDBNull = false;
                this.columnFleetIOVehicleVIN.MaxLength = 50;
                this.columnFleetIOVehicleType.AllowDBNull = false;
                this.columnFleetIOVehicleType.MaxLength = 50;
                this.columnFleetIOVehicleGroup.AllowDBNull = false;
                this.columnFleetIOVehicleGroup.MaxLength = 2147483647;
                this.columnFleetIOVehicleLicensePlate.AllowDBNull = false;
                this.columnFleetIOVehicleLicensePlate.MaxLength = 50;
                this.columnFleetIOVehicleModel.AllowDBNull = false;
                this.columnFleetIOVehicleModel.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesRow NewfleetiovehiclesRow() {
                return ((fleetiovehiclesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new fleetiovehiclesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(fleetiovehiclesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fleetiovehiclesRowChanged != null)) {
                    this.fleetiovehiclesRowChanged(this, new fleetiovehiclesRowChangeEvent(((fleetiovehiclesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fleetiovehiclesRowChanging != null)) {
                    this.fleetiovehiclesRowChanging(this, new fleetiovehiclesRowChangeEvent(((fleetiovehiclesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fleetiovehiclesRowDeleted != null)) {
                    this.fleetiovehiclesRowDeleted(this, new fleetiovehiclesRowChangeEvent(((fleetiovehiclesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fleetiovehiclesRowDeleting != null)) {
                    this.fleetiovehiclesRowDeleting(this, new fleetiovehiclesRowChangeEvent(((fleetiovehiclesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovefleetiovehiclesRow(fleetiovehiclesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FleetIOVehiclesDataSet ds = new FleetIOVehiclesDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "fleetiovehiclesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class fleetiovehiclesRow : global::System.Data.DataRow {
            
            private fleetiovehiclesDataTable tablefleetiovehicles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal fleetiovehiclesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefleetiovehicles = ((fleetiovehiclesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int FleetIOVehiclesTransactionID {
                get {
                    return ((int)(this[this.tablefleetiovehicles.FleetIOVehiclesTransactionIDColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehiclesTransactionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int FleetIOVehicleID {
                get {
                    return ((int)(this[this.tablefleetiovehicles.FleetIOVehicleIDColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int FleetIOVehicleYear {
                get {
                    return ((int)(this[this.tablefleetiovehicles.FleetIOVehicleYearColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleNumber {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleNumberColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleMake {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleMakeColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleMakeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleVIN {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleVINColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleVINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleType {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleTypeColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleGroup {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleGroupColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleLicensePlate {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleLicensePlateColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleLicensePlateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FleetIOVehicleModel {
                get {
                    return ((string)(this[this.tablefleetiovehicles.FleetIOVehicleModelColumn]));
                }
                set {
                    this[this.tablefleetiovehicles.FleetIOVehicleModelColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class fleetiovehiclesRowChangeEvent : global::System.EventArgs {
            
            private fleetiovehiclesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesRowChangeEvent(fleetiovehiclesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public fleetiovehiclesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FleetIOVehicleDLL.FleetIOVehiclesDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class fleetiovehiclesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public fleetiovehiclesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "fleetiovehicles";
            tableMapping.ColumnMappings.Add("FleetIOVehiclesTransactionID", "FleetIOVehiclesTransactionID");
            tableMapping.ColumnMappings.Add("FleetIOVehicleID", "FleetIOVehicleID");
            tableMapping.ColumnMappings.Add("FleetIOVehicleYear", "FleetIOVehicleYear");
            tableMapping.ColumnMappings.Add("FleetIOVehicleNumber", "FleetIOVehicleNumber");
            tableMapping.ColumnMappings.Add("FleetIOVehicleMake", "FleetIOVehicleMake");
            tableMapping.ColumnMappings.Add("FleetIOVehicleVIN", "FleetIOVehicleVIN");
            tableMapping.ColumnMappings.Add("FleetIOVehicleType", "FleetIOVehicleType");
            tableMapping.ColumnMappings.Add("FleetIOVehicleGroup", "FleetIOVehicleGroup");
            tableMapping.ColumnMappings.Add("FleetIOVehicleLicensePlate", "FleetIOVehicleLicensePlate");
            tableMapping.ColumnMappings.Add("FleetIOVehicleModel", "FleetIOVehicleModel");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[fleetiovehicles] WHERE (([FleetIOVehiclesTransactionID] = @Original_FleetIOVehiclesTransactionID) AND ([FleetIOVehicleID] = @Original_FleetIOVehicleID) AND ([FleetIOVehicleYear] = @Original_FleetIOVehicleYear) AND ([FleetIOVehicleNumber] = @Original_FleetIOVehicleNumber) AND ([FleetIOVehicleMake] = @Original_FleetIOVehicleMake) AND ([FleetIOVehicleVIN] = @Original_FleetIOVehicleVIN) AND ([FleetIOVehicleType] = @Original_FleetIOVehicleType) AND ([FleetIOVehicleLicensePlate] = @Original_FleetIOVehicleLicensePlate) AND ([FleetIOVehicleModel] = @Original_FleetIOVehicleModel))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehiclesTransactionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehiclesTransactionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleYear", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleYear", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleMake", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleMake", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleVIN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleVIN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleLicensePlate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleLicensePlate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleModel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[fleetiovehicles] ([FleetIOVehicleID], [FleetIOVehicleYear], [FleetIOVehicleNumber], [FleetIOVehicleMake], [FleetIOVehicleVIN], [FleetIOVehicleType], [FleetIOVehicleGroup], [FleetIOVehicleLicensePlate], [FleetIOVehicleModel]) VALUES (@FleetIOVehicleID, @FleetIOVehicleYear, @FleetIOVehicleNumber, @FleetIOVehicleMake, @FleetIOVehicleVIN, @FleetIOVehicleType, @FleetIOVehicleGroup, @FleetIOVehicleLicensePlate, @FleetIOVehicleModel);
SELECT FleetIOVehiclesTransactionID, FleetIOVehicleID, FleetIOVehicleYear, FleetIOVehicleNumber, FleetIOVehicleMake, FleetIOVehicleVIN, FleetIOVehicleType, FleetIOVehicleGroup, FleetIOVehicleLicensePlate, FleetIOVehicleModel FROM fleetiovehicles WHERE (FleetIOVehiclesTransactionID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleYear", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleYear", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleMake", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleMake", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleVIN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleVIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleGroup", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleGroup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleLicensePlate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleLicensePlate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleModel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[fleetiovehicles] SET [FleetIOVehicleID] = @FleetIOVehicleID, [FleetIOVehicleYear] = @FleetIOVehicleYear, [FleetIOVehicleNumber] = @FleetIOVehicleNumber, [FleetIOVehicleMake] = @FleetIOVehicleMake, [FleetIOVehicleVIN] = @FleetIOVehicleVIN, [FleetIOVehicleType] = @FleetIOVehicleType, [FleetIOVehicleGroup] = @FleetIOVehicleGroup, [FleetIOVehicleLicensePlate] = @FleetIOVehicleLicensePlate, [FleetIOVehicleModel] = @FleetIOVehicleModel WHERE (([FleetIOVehiclesTransactionID] = @Original_FleetIOVehiclesTransactionID) AND ([FleetIOVehicleID] = @Original_FleetIOVehicleID) AND ([FleetIOVehicleYear] = @Original_FleetIOVehicleYear) AND ([FleetIOVehicleNumber] = @Original_FleetIOVehicleNumber) AND ([FleetIOVehicleMake] = @Original_FleetIOVehicleMake) AND ([FleetIOVehicleVIN] = @Original_FleetIOVehicleVIN) AND ([FleetIOVehicleType] = @Original_FleetIOVehicleType) AND ([FleetIOVehicleLicensePlate] = @Original_FleetIOVehicleLicensePlate) AND ([FleetIOVehicleModel] = @Original_FleetIOVehicleModel));
SELECT FleetIOVehiclesTransactionID, FleetIOVehicleID, FleetIOVehicleYear, FleetIOVehicleNumber, FleetIOVehicleMake, FleetIOVehicleVIN, FleetIOVehicleType, FleetIOVehicleGroup, FleetIOVehicleLicensePlate, FleetIOVehicleModel FROM fleetiovehicles WHERE (FleetIOVehiclesTransactionID = @FleetIOVehiclesTransactionID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleYear", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleYear", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleMake", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleMake", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleVIN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleVIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleGroup", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleGroup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleLicensePlate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleLicensePlate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehicleModel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleModel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehiclesTransactionID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehiclesTransactionID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleYear", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleYear", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleMake", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleMake", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleVIN", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleVIN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleLicensePlate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleLicensePlate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FleetIOVehicleModel", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehicleModel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FleetIOVehiclesTransactionID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "FleetIOVehiclesTransactionID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FleetIOVehicleDLL.Properties.Settings.Default.whsetracConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FleetIOVehiclesTransactionID, FleetIOVehicleID, FleetIOVehicleYear, FleetI" +
                "OVehicleNumber, FleetIOVehicleMake, FleetIOVehicleVIN, FleetIOVehicleType, Fleet" +
                "IOVehicleGroup, FleetIOVehicleLicensePlate, FleetIOVehicleModel FROM dbo.fleetio" +
                "vehicles";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FleetIOVehiclesDataSet.fleetiovehiclesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FleetIOVehiclesDataSet.fleetiovehiclesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FleetIOVehiclesDataSet.fleetiovehiclesDataTable dataTable = new FleetIOVehiclesDataSet.fleetiovehiclesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FleetIOVehiclesDataSet.fleetiovehiclesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FleetIOVehiclesDataSet dataSet) {
            return this.Adapter.Update(dataSet, "fleetiovehicles");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_FleetIOVehiclesTransactionID, int Original_FleetIOVehicleID, int Original_FleetIOVehicleYear, string Original_FleetIOVehicleNumber, string Original_FleetIOVehicleMake, string Original_FleetIOVehicleVIN, string Original_FleetIOVehicleType, string Original_FleetIOVehicleLicensePlate, string Original_FleetIOVehicleModel) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_FleetIOVehiclesTransactionID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_FleetIOVehicleID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_FleetIOVehicleYear));
            if ((Original_FleetIOVehicleNumber == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_FleetIOVehicleNumber));
            }
            if ((Original_FleetIOVehicleMake == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleMake");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FleetIOVehicleMake));
            }
            if ((Original_FleetIOVehicleVIN == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleVIN");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_FleetIOVehicleVIN));
            }
            if ((Original_FleetIOVehicleType == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FleetIOVehicleType));
            }
            if ((Original_FleetIOVehicleLicensePlate == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleLicensePlate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_FleetIOVehicleLicensePlate));
            }
            if ((Original_FleetIOVehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleModel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_FleetIOVehicleModel));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FleetIOVehicleID, int FleetIOVehicleYear, string FleetIOVehicleNumber, string FleetIOVehicleMake, string FleetIOVehicleVIN, string FleetIOVehicleType, string FleetIOVehicleGroup, string FleetIOVehicleLicensePlate, string FleetIOVehicleModel) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FleetIOVehicleID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(FleetIOVehicleYear));
            if ((FleetIOVehicleNumber == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FleetIOVehicleNumber));
            }
            if ((FleetIOVehicleMake == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleMake");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FleetIOVehicleMake));
            }
            if ((FleetIOVehicleVIN == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleVIN");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FleetIOVehicleVIN));
            }
            if ((FleetIOVehicleType == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(FleetIOVehicleType));
            }
            if ((FleetIOVehicleGroup == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleGroup");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FleetIOVehicleGroup));
            }
            if ((FleetIOVehicleLicensePlate == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleLicensePlate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(FleetIOVehicleLicensePlate));
            }
            if ((FleetIOVehicleModel == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleModel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(FleetIOVehicleModel));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FleetIOVehicleID, 
                    int FleetIOVehicleYear, 
                    string FleetIOVehicleNumber, 
                    string FleetIOVehicleMake, 
                    string FleetIOVehicleVIN, 
                    string FleetIOVehicleType, 
                    string FleetIOVehicleGroup, 
                    string FleetIOVehicleLicensePlate, 
                    string FleetIOVehicleModel, 
                    int Original_FleetIOVehiclesTransactionID, 
                    int Original_FleetIOVehicleID, 
                    int Original_FleetIOVehicleYear, 
                    string Original_FleetIOVehicleNumber, 
                    string Original_FleetIOVehicleMake, 
                    string Original_FleetIOVehicleVIN, 
                    string Original_FleetIOVehicleType, 
                    string Original_FleetIOVehicleLicensePlate, 
                    string Original_FleetIOVehicleModel, 
                    int FleetIOVehiclesTransactionID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FleetIOVehicleID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(FleetIOVehicleYear));
            if ((FleetIOVehicleNumber == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FleetIOVehicleNumber));
            }
            if ((FleetIOVehicleMake == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleMake");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FleetIOVehicleMake));
            }
            if ((FleetIOVehicleVIN == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleVIN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FleetIOVehicleVIN));
            }
            if ((FleetIOVehicleType == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(FleetIOVehicleType));
            }
            if ((FleetIOVehicleGroup == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleGroup");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FleetIOVehicleGroup));
            }
            if ((FleetIOVehicleLicensePlate == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleLicensePlate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(FleetIOVehicleLicensePlate));
            }
            if ((FleetIOVehicleModel == null)) {
                throw new global::System.ArgumentNullException("FleetIOVehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(FleetIOVehicleModel));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_FleetIOVehiclesTransactionID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_FleetIOVehicleID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_FleetIOVehicleYear));
            if ((Original_FleetIOVehicleNumber == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_FleetIOVehicleNumber));
            }
            if ((Original_FleetIOVehicleMake == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleMake");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_FleetIOVehicleMake));
            }
            if ((Original_FleetIOVehicleVIN == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleVIN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_FleetIOVehicleVIN));
            }
            if ((Original_FleetIOVehicleType == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_FleetIOVehicleType));
            }
            if ((Original_FleetIOVehicleLicensePlate == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleLicensePlate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_FleetIOVehicleLicensePlate));
            }
            if ((Original_FleetIOVehicleModel == null)) {
                throw new global::System.ArgumentNullException("Original_FleetIOVehicleModel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_FleetIOVehicleModel));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(FleetIOVehiclesTransactionID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FleetIOVehicleID, 
                    int FleetIOVehicleYear, 
                    string FleetIOVehicleNumber, 
                    string FleetIOVehicleMake, 
                    string FleetIOVehicleVIN, 
                    string FleetIOVehicleType, 
                    string FleetIOVehicleGroup, 
                    string FleetIOVehicleLicensePlate, 
                    string FleetIOVehicleModel, 
                    int Original_FleetIOVehiclesTransactionID, 
                    int Original_FleetIOVehicleID, 
                    int Original_FleetIOVehicleYear, 
                    string Original_FleetIOVehicleNumber, 
                    string Original_FleetIOVehicleMake, 
                    string Original_FleetIOVehicleVIN, 
                    string Original_FleetIOVehicleType, 
                    string Original_FleetIOVehicleLicensePlate, 
                    string Original_FleetIOVehicleModel) {
            return this.Update(FleetIOVehicleID, FleetIOVehicleYear, FleetIOVehicleNumber, FleetIOVehicleMake, FleetIOVehicleVIN, FleetIOVehicleType, FleetIOVehicleGroup, FleetIOVehicleLicensePlate, FleetIOVehicleModel, Original_FleetIOVehiclesTransactionID, Original_FleetIOVehicleID, Original_FleetIOVehicleYear, Original_FleetIOVehicleNumber, Original_FleetIOVehicleMake, Original_FleetIOVehicleVIN, Original_FleetIOVehicleType, Original_FleetIOVehicleLicensePlate, Original_FleetIOVehicleModel, Original_FleetIOVehiclesTransactionID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private fleetiovehiclesTableAdapter _fleetiovehiclesTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public fleetiovehiclesTableAdapter fleetiovehiclesTableAdapter {
            get {
                return this._fleetiovehiclesTableAdapter;
            }
            set {
                this._fleetiovehiclesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._fleetiovehiclesTableAdapter != null) 
                            && (this._fleetiovehiclesTableAdapter.Connection != null))) {
                    return this._fleetiovehiclesTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._fleetiovehiclesTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(FleetIOVehiclesDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fleetiovehiclesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.fleetiovehicles.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fleetiovehiclesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(FleetIOVehiclesDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fleetiovehiclesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.fleetiovehicles.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fleetiovehiclesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(FleetIOVehiclesDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._fleetiovehiclesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.fleetiovehicles.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fleetiovehiclesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(FleetIOVehiclesDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._fleetiovehiclesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fleetiovehiclesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._fleetiovehiclesTableAdapter != null)) {
                    revertConnections.Add(this._fleetiovehiclesTableAdapter, this._fleetiovehiclesTableAdapter.Connection);
                    this._fleetiovehiclesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fleetiovehiclesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fleetiovehiclesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fleetiovehiclesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fleetiovehiclesTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._fleetiovehiclesTableAdapter != null)) {
                    this._fleetiovehiclesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fleetiovehiclesTableAdapter]));
                    this._fleetiovehiclesTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591